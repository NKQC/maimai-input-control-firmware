#include "../font_system.h"

// ASCII字符点阵数据 - 小字体 (8x8)
static const uint8_t ascii_small_space[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const uint8_t ascii_small_exclamation[] = {0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00};
static const uint8_t ascii_small_quote[] = {0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00};
static const uint8_t ascii_small_hash[] = {0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00};
static const uint8_t ascii_small_dollar[] = {0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00};
static const uint8_t ascii_small_percent[] = {0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00};
static const uint8_t ascii_small_ampersand[] = {0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00};
static const uint8_t ascii_small_apostrophe[] = {0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00};
static const uint8_t ascii_small_lparen[] = {0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00};
static const uint8_t ascii_small_rparen[] = {0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00};
static const uint8_t ascii_small_asterisk[] = {0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00};
static const uint8_t ascii_small_plus[] = {0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00};
static const uint8_t ascii_small_comma[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x06, 0x00};
static const uint8_t ascii_small_minus[] = {0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00};
static const uint8_t ascii_small_period[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00};
static const uint8_t ascii_small_slash[] = {0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00};

// 数字 0-9
static const uint8_t ascii_small_0[] = {0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00};
static const uint8_t ascii_small_1[] = {0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00};
static const uint8_t ascii_small_2[] = {0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00};
static const uint8_t ascii_small_3[] = {0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00};
static const uint8_t ascii_small_4[] = {0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00};
static const uint8_t ascii_small_5[] = {0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00};
static const uint8_t ascii_small_6[] = {0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00};
static const uint8_t ascii_small_7[] = {0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00};
static const uint8_t ascii_small_8[] = {0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00};
static const uint8_t ascii_small_9[] = {0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00};

// 字母 A-Z (完整版)
static const uint8_t ascii_small_A[] = {0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00};
static const uint8_t ascii_small_B[] = {0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00};
static const uint8_t ascii_small_C[] = {0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00};
static const uint8_t ascii_small_D[] = {0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00};
static const uint8_t ascii_small_E[] = {0x7F, 0x06, 0x06, 0x3E, 0x06, 0x06, 0x7F, 0x00};
static const uint8_t ascii_small_F[] = {0x7F, 0x06, 0x06, 0x3E, 0x06, 0x06, 0x06, 0x00};
static const uint8_t ascii_small_G[] = {0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00};
static const uint8_t ascii_small_H[] = {0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00};
static const uint8_t ascii_small_I[] = {0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00};
static const uint8_t ascii_small_J[] = {0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00};
static const uint8_t ascii_small_K[] = {0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00};
static const uint8_t ascii_small_L[] = {0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00};
static const uint8_t ascii_small_M[] = {0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00};
static const uint8_t ascii_small_N[] = {0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00};
static const uint8_t ascii_small_O[] = {0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00};
static const uint8_t ascii_small_P[] = {0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00};
static const uint8_t ascii_small_Q[] = {0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00};
static const uint8_t ascii_small_R[] = {0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00};
static const uint8_t ascii_small_S[] = {0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00};
static const uint8_t ascii_small_T[] = {0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00};
static const uint8_t ascii_small_U[] = {0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00};
static const uint8_t ascii_small_V[] = {0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00};
static const uint8_t ascii_small_W[] = {0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00};
static const uint8_t ascii_small_X[] = {0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00};
static const uint8_t ascii_small_Y[] = {0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00};
static const uint8_t ascii_small_Z[] = {0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00};

// 小写字母 a-z
static const uint8_t ascii_small_a[] = {0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00};
static const uint8_t ascii_small_b[] = {0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00};
static const uint8_t ascii_small_c[] = {0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00};
static const uint8_t ascii_small_d[] = {0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00};
static const uint8_t ascii_small_e[] = {0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00};
static const uint8_t ascii_small_f[] = {0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00};
static const uint8_t ascii_small_g[] = {0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F};
static const uint8_t ascii_small_h[] = {0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00};
static const uint8_t ascii_small_i[] = {0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00};
static const uint8_t ascii_small_j[] = {0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E};
static const uint8_t ascii_small_k[] = {0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00};
static const uint8_t ascii_small_l[] = {0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00};
static const uint8_t ascii_small_m[] = {0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00};
static const uint8_t ascii_small_n[] = {0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00};
static const uint8_t ascii_small_o[] = {0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00};
static const uint8_t ascii_small_p[] = {0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F};
static const uint8_t ascii_small_q[] = {0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78};
static const uint8_t ascii_small_r[] = {0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00};
static const uint8_t ascii_small_s[] = {0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00};
static const uint8_t ascii_small_t[] = {0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00};
static const uint8_t ascii_small_u[] = {0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00};
static const uint8_t ascii_small_v[] = {0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00};
static const uint8_t ascii_small_w[] = {0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00};
static const uint8_t ascii_small_x[] = {0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00};
static const uint8_t ascii_small_y[] = {0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F};
static const uint8_t ascii_small_z[] = {0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00};

// 其他符号
static const uint8_t ascii_small_lbracket[] = {0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00};
static const uint8_t ascii_small_backslash[] = {0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00};
static const uint8_t ascii_small_rbracket[] = {0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00};
static const uint8_t ascii_small_caret[] = {0x0E, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const uint8_t ascii_small_underscore[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};
static const uint8_t ascii_small_grave[] = {0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00};
static const uint8_t ascii_small_lbrace[] = {0x70, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x70, 0x00};
static const uint8_t ascii_small_pipe[] = {0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00};
static const uint8_t ascii_small_rbrace[] = {0x0E, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0E, 0x00};
static const uint8_t ascii_small_tilde[] = {0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// 完整的ASCII字符数据 - 添加缺失的字符
static const uint8_t ascii_small_colon[] = {0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00};
static const uint8_t ascii_small_semicolon[] = {0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x06, 0x00};
static const uint8_t ascii_small_less[] = {0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00};
static const uint8_t ascii_small_equal[] = {0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00};
static const uint8_t ascii_small_greater[] = {0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00};
static const uint8_t ascii_small_question[] = {0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00};
static const uint8_t ascii_small_at[] = {0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00};

// ASCII字体数据表 - 小字体 (完整版)
const CharBitmap ascii_font_small[ASCII_COUNT] = {
    {4, 8, ascii_small_space},      // ' ' (32)
    {2, 8, ascii_small_exclamation}, // '!' (33)
    {4, 8, ascii_small_quote},      // '"' (34)
    {6, 8, ascii_small_hash},       // '#' (35)
    {6, 8, ascii_small_dollar},     // '$' (36)
    {8, 8, ascii_small_percent},    // '%' (37)
    {8, 8, ascii_small_ampersand},  // '&' (38)
    {2, 8, ascii_small_apostrophe}, // ''' (39)
    {4, 8, ascii_small_lparen},     // '(' (40)
    {4, 8, ascii_small_rparen},     // ')' (41)
    {6, 8, ascii_small_asterisk},   // '*' (42)
    {6, 8, ascii_small_plus},       // '+' (43)
    {2, 8, ascii_small_comma},      // ',' (44)
    {6, 8, ascii_small_minus},      // '-' (45)
    {2, 8, ascii_small_period},     // '.' (46)
    {6, 8, ascii_small_slash},      // '/' (47)
    {6, 8, ascii_small_0},          // '0' (48)
    {6, 8, ascii_small_1},          // '1' (49)
    {6, 8, ascii_small_2},          // '2' (50)
    {6, 8, ascii_small_3},          // '3' (51)
    {6, 8, ascii_small_4},          // '4' (52)
    {6, 8, ascii_small_5},          // '5' (53)
    {6, 8, ascii_small_6},          // '6' (54)
    {6, 8, ascii_small_7},          // '7' (55)
    {6, 8, ascii_small_8},          // '8' (56)
    {6, 8, ascii_small_9},          // '9' (57)
    {2, 8, ascii_small_colon},      // ':' (58)
    {2, 8, ascii_small_semicolon},  // ';' (59)
    {6, 8, ascii_small_less},       // '<' (60)
    {6, 8, ascii_small_equal},      // '=' (61)
    {6, 8, ascii_small_greater},    // '>' (62)
    {6, 8, ascii_small_question},   // '?' (63)
    {8, 8, ascii_small_at},         // '@' (64)
    {6, 8, ascii_small_A},          // 'A' (65)
    {6, 8, ascii_small_B},          // 'B' (66)
    {6, 8, ascii_small_C},          // 'C' (67)
    {6, 8, ascii_small_D},          // 'D' (68)
    {6, 8, ascii_small_E},          // 'E' (69)
    {6, 8, ascii_small_F},          // 'F' (70)
    {6, 8, ascii_small_G},          // 'G' (71)
    {6, 8, ascii_small_H},          // 'H' (72)
    {6, 8, ascii_small_I},          // 'I' (73)
    {6, 8, ascii_small_J},          // 'J' (74)
    {6, 8, ascii_small_K},          // 'K' (75)
    {6, 8, ascii_small_L},          // 'L' (76)
    {6, 8, ascii_small_M},          // 'M' (77)
    {6, 8, ascii_small_N},          // 'N' (78)
    {6, 8, ascii_small_O},          // 'O' (79)
    {6, 8, ascii_small_P},          // 'P' (80)
    {6, 8, ascii_small_Q},          // 'Q' (81)
    {6, 8, ascii_small_R},          // 'R' (82)
    {6, 8, ascii_small_S},          // 'S' (83)
    {6, 8, ascii_small_T},          // 'T' (84)
    {6, 8, ascii_small_U},          // 'U' (85)
    {6, 8, ascii_small_V},          // 'V' (86)
    {6, 8, ascii_small_W},          // 'W' (87)
    {6, 8, ascii_small_X},          // 'X' (88)
    {6, 8, ascii_small_Y},          // 'Y' (89)
    {6, 8, ascii_small_Z},          // 'Z' (90)
    {4, 8, ascii_small_lbracket},   // '[' (91)
    {6, 8, ascii_small_backslash},  // '\\' (92)
    {4, 8, ascii_small_rbracket},   // ']' (93)
    {6, 8, ascii_small_caret},      // '^' (94)
    {8, 8, ascii_small_underscore}, // '_' (95)
    {4, 8, ascii_small_grave},      // '`' (96)
    {6, 8, ascii_small_a},          // 'a' (97)
    {6, 8, ascii_small_b},          // 'b' (98)
    {6, 8, ascii_small_c},          // 'c' (99)
    {6, 8, ascii_small_d},          // 'd' (100)
    {6, 8, ascii_small_e},          // 'e' (101)
    {6, 8, ascii_small_f},          // 'f' (102)
    {6, 8, ascii_small_g},          // 'g' (103)
    {6, 8, ascii_small_h},          // 'h' (104)
    {6, 8, ascii_small_i},          // 'i' (105)
    {6, 8, ascii_small_j},          // 'j' (106)
    {6, 8, ascii_small_k},          // 'k' (107)
    {6, 8, ascii_small_l},          // 'l' (108)
    {6, 8, ascii_small_m},          // 'm' (109)
    {6, 8, ascii_small_n},          // 'n' (110)
    {6, 8, ascii_small_o},          // 'o' (111)
    {6, 8, ascii_small_p},          // 'p' (112)
    {6, 8, ascii_small_q},          // 'q' (113)
    {6, 8, ascii_small_r},          // 'r' (114)
    {6, 8, ascii_small_s},          // 's' (115)
    {6, 8, ascii_small_t},          // 't' (116)
    {6, 8, ascii_small_u},          // 'u' (117)
    {6, 8, ascii_small_v},          // 'v' (118)
    {6, 8, ascii_small_w},          // 'w' (119)
    {6, 8, ascii_small_x},          // 'x' (120)
    {6, 8, ascii_small_y},          // 'y' (121)
    {6, 8, ascii_small_z},          // 'z' (122)
    {6, 8, ascii_small_lbrace},     // '{' (123)
    {2, 8, ascii_small_pipe},       // '|' (124)
    {6, 8, ascii_small_rbrace},     // '}' (125)
    {8, 8, ascii_small_tilde},      // '~' (126)
};

// 12x12中字体数据
static const uint8_t ascii_medium_space[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t ascii_medium_A[] = {
    0x00, 0x00, 0x0E, 0x00, 0x1F, 0x00, 0x33, 0x80, 0x33, 0x80, 0x7F, 0xC0,
    0x61, 0xC0, 0x61, 0xC0, 0xE1, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t ascii_medium_0[] = {
    0x00, 0x00, 0x1F, 0x00, 0x31, 0x80, 0x61, 0xC0, 0x61, 0xC0, 0x61, 0xC0,
    0x61, 0xC0, 0x31, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 16x16大字体数据
static const uint8_t ascii_large_space[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t ascii_large_A[] = {
    0x00, 0x00, 0x03, 0xC0, 0x07, 0xE0, 0x0E, 0x70, 0x0C, 0x30, 0x1C, 0x38, 0x18, 0x18, 0x38, 0x1C,
    0x3F, 0xFC, 0x7F, 0xFE, 0x70, 0x0E, 0x60, 0x06, 0xE0, 0x07, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t ascii_large_0[] = {
    0x00, 0x00, 0x07, 0xE0, 0x1F, 0xF8, 0x3C, 0x3C, 0x38, 0x1C, 0x70, 0x0E, 0x70, 0x0E, 0x70, 0x0E,
    0x70, 0x0E, 0x38, 0x1C, 0x3C, 0x3C, 0x1F, 0xF8, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 中文字符16x16大字体数据
static const uint8_t chinese_main_large[] = {
    0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x3F, 0xFC, 0x01, 0x00, 0x01, 0x00,
    0x01, 0x00, 0x05, 0x40, 0x09, 0x20, 0x11, 0x10, 0x21, 0x08, 0x41, 0x04, 0x01, 0x00, 0x00, 0x00
};
static const uint8_t chinese_status_large[] = {
    0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x1F, 0xF0, 0x04, 0x40, 0x04, 0x40, 0x1F, 0xF0,
    0x04, 0x40, 0x04, 0x40, 0x1F, 0xF0, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t chinese_state_large[] = {
    0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x1F, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7F, 0xFC,
    0x41, 0x04, 0x41, 0x04, 0x41, 0x04, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t chinese_info_large[] = {
    0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x1F, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00,
    0x3F, 0xF8, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t chinese_set_large[] = {
    0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x3F, 0xFC, 0x01, 0x00, 0x01, 0x00, 0x0F, 0xE0, 0x01, 0x00,
    0x01, 0x00, 0x3F, 0xFC, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t chinese_place_large[] = {
    0x00, 0x00, 0x3F, 0xF8, 0x21, 0x08, 0x21, 0x08, 0x3F, 0xF8, 0x00, 0x00, 0x3F, 0xF8, 0x21, 0x08,
    0x21, 0x08, 0x3F, 0xF8, 0x21, 0x08, 0x21, 0x08, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 中文字符点阵数据 - 常用汉字
// 以下是一些常用中文字符的点阵数据示例

// "主" - Unicode: 0x4E3B
static const uint8_t chinese_main_small[] = {
    0x00, 0x00, 0x10, 0x10, 0x10, 0x7C, 0x10, 0x10,
    0x10, 0x28, 0x44, 0x82, 0x00, 0x00, 0x00, 0x00
};

// "页" - Unicode: 0x9875
static const uint8_t chinese_page_small[] = {
    0x00, 0x00, 0x7E, 0x42, 0x42, 0x7E, 0x42, 0x42,
    0x7E, 0x42, 0x42, 0x7E, 0x00, 0x00, 0x00, 0x00
};

// "面" - Unicode: 0x9762
static const uint8_t chinese_surface_small[] = {
    0x00, 0x00, 0xFE, 0x82, 0x82, 0xFE, 0x82, 0x82,
    0xFE, 0x82, 0x82, 0xFE, 0x00, 0x00, 0x00, 0x00
};

// "设" - Unicode: 0x8BBE
static const uint8_t chinese_set_small[] = {
    0x00, 0x08, 0x08, 0x7F, 0x08, 0x08, 0x3E, 0x08,
    0x08, 0x7F, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00
};

// "置" - Unicode: 0x7F6E
static const uint8_t chinese_place_small[] = {
    0x00, 0x7E, 0x42, 0x42, 0x7E, 0x00, 0x7E, 0x42,
    0x42, 0x7E, 0x42, 0x42, 0x7E, 0x00, 0x00, 0x00
};

// "状" - Unicode: 0x72B6
static const uint8_t chinese_status_small[] = {
    0x00, 0x00, 0x20, 0x20, 0x3E, 0x22, 0x22, 0x3E,
    0x22, 0x22, 0x3E, 0x20, 0x20, 0x00, 0x00, 0x00
};

// "态" - Unicode: 0x6001
static const uint8_t chinese_state_small[] = {
    0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0xFE,
    0x82, 0x82, 0x82, 0xFE, 0x00, 0x00, 0x00, 0x00
};

// "信" - Unicode: 0x4FE1
static const uint8_t chinese_info_small[] = {
    0x00, 0x10, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x10,
    0x7E, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00
};

// "息" - Unicode: 0x606F
static const uint8_t chinese_message_small[] = {
    0x00, 0x00, 0x7E, 0x42, 0x42, 0x7E, 0x00, 0xFE,
    0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00
};

// "版" - Unicode: 0x7248
static const uint8_t chinese_version_small[] = {
    0x00, 0x20, 0x20, 0x3E, 0x22, 0x22, 0x3E, 0x22,
    0x22, 0x3E, 0x22, 0x20, 0x20, 0x00, 0x00, 0x00
};

// "本" - Unicode: 0x672C
static const uint8_t chinese_this_small[] = {
    0x00, 0x00, 0x10, 0x10, 0x10, 0x7C, 0x10, 0x10,
    0x10, 0x7E, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00
};

// 中文字符映射表 - 小字体
// 静态字符位图定义
static const CharBitmap chinese_main_bitmap_small = {8, 8, chinese_main_small};
static const CharBitmap chinese_page_bitmap_small = {8, 8, chinese_page_small};
static const CharBitmap chinese_surface_bitmap_small = {8, 8, chinese_surface_small};
static const CharBitmap chinese_set_bitmap_small = {8, 8, chinese_set_small};
static const CharBitmap chinese_place_bitmap_small = {8, 8, chinese_place_small};
static const CharBitmap chinese_status_bitmap_small = {8, 8, chinese_status_small};
static const CharBitmap chinese_state_bitmap_small = {8, 8, chinese_state_small};
static const CharBitmap chinese_info_bitmap_small = {8, 8, chinese_info_small};
static const CharBitmap chinese_message_bitmap_small = {8, 8, chinese_message_small};
static const CharBitmap chinese_version_bitmap_small = {8, 8, chinese_version_small};
static const CharBitmap chinese_this_bitmap_small = {8, 8, chinese_this_small};

const ChineseCharMap chinese_font_small[CHINESE_CHAR_COUNT] = {
    {0x4E3B, &chinese_main_bitmap_small},      // 主
    {0x9875, &chinese_page_bitmap_small},      // 页
    {0x9762, &chinese_surface_bitmap_small},   // 面
    {0x8BBE, &chinese_set_bitmap_small},       // 设
    {0x7F6E, &chinese_place_bitmap_small},     // 置
    {0x72B6, &chinese_status_bitmap_small},    // 状
    {0x6001, &chinese_state_bitmap_small},     // 态
    {0x4FE1, &chinese_info_bitmap_small},      // 信
    {0x606F, &chinese_message_bitmap_small},   // 息
    {0x7248, &chinese_version_bitmap_small},   // 版
    {0x672C, &chinese_this_bitmap_small},      // 本
    // 其他字符映射...
    {0, nullptr} // 结束标记
};

const CharBitmap ascii_font_medium[ASCII_COUNT] = {
    {6, 12, ascii_medium_space},    // ' ' (32)
    {6, 12, ascii_medium_space},    // '!' (33) - 使用空格作为占位
    {6, 12, ascii_medium_space},    // '"' (34)
    {6, 12, ascii_medium_space},    // '#' (35)
    {6, 12, ascii_medium_space},    // '$' (36)
    {6, 12, ascii_medium_space},    // '%' (37)
    {6, 12, ascii_medium_space},    // '&' (38)
    {6, 12, ascii_medium_space},    // ''' (39)
    {6, 12, ascii_medium_space},    // '(' (40)
    {6, 12, ascii_medium_space},    // ')' (41)
    {6, 12, ascii_medium_space},    // '*' (42)
    {6, 12, ascii_medium_space},    // '+' (43)
    {6, 12, ascii_medium_space},    // ',' (44)
    {6, 12, ascii_medium_space},    // '-' (45)
    {6, 12, ascii_medium_space},    // '.' (46)
    {6, 12, ascii_medium_space},    // '/' (47)
    {12, 12, ascii_medium_0},       // '0' (48)
    {12, 12, ascii_medium_0},       // '1' (49) - 使用0作为占位
    {12, 12, ascii_medium_0},       // '2' (50)
    {12, 12, ascii_medium_0},       // '3' (51)
    {12, 12, ascii_medium_0},       // '4' (52)
    {12, 12, ascii_medium_0},       // '5' (53)
    {12, 12, ascii_medium_0},       // '6' (54)
    {12, 12, ascii_medium_0},       // '7' (55)
    {12, 12, ascii_medium_0},       // '8' (56)
    {12, 12, ascii_medium_0},       // '9' (57)
    {6, 12, ascii_medium_space},    // ':' (58)
    {6, 12, ascii_medium_space},    // ';' (59)
    {6, 12, ascii_medium_space},    // '<' (60)
    {6, 12, ascii_medium_space},    // '=' (61)
    {6, 12, ascii_medium_space},    // '>' (62)
    {6, 12, ascii_medium_space},    // '?' (63)
    {6, 12, ascii_medium_space},    // '@' (64)
    {12, 12, ascii_medium_A},       // 'A' (65)
    {12, 12, ascii_medium_A},       // 'B' (66) - 使用A作为占位
    {12, 12, ascii_medium_A},       // 'C' (67)
    // 其余字符使用默认数据
};

const CharBitmap ascii_font_large[ASCII_COUNT] = {
    {8, 16, ascii_large_space},     // ' ' (32)
    {8, 16, ascii_large_space},     // '!' (33) - 使用空格作为占位
    {8, 16, ascii_large_space},     // '"' (34)
    {8, 16, ascii_large_space},     // '#' (35)
    {8, 16, ascii_large_space},     // '$' (36)
    {8, 16, ascii_large_space},     // '%' (37)
    {8, 16, ascii_large_space},     // '&' (38)
    {8, 16, ascii_large_space},     // ''' (39)
    {8, 16, ascii_large_space},     // '(' (40)
    {8, 16, ascii_large_space},     // ')' (41)
    {8, 16, ascii_large_space},     // '*' (42)
    {8, 16, ascii_large_space},     // '+' (43)
    {8, 16, ascii_large_space},     // ',' (44)
    {8, 16, ascii_large_space},     // '-' (45)
    {8, 16, ascii_large_space},     // '.' (46)
    {8, 16, ascii_large_space},     // '/' (47)
    {16, 16, ascii_large_0},        // '0' (48)
    {16, 16, ascii_large_0},        // '1' (49) - 使用0作为占位
    {16, 16, ascii_large_0},        // '2' (50)
    {16, 16, ascii_large_0},        // '3' (51)
    {16, 16, ascii_large_0},        // '4' (52)
    {16, 16, ascii_large_0},        // '5' (53)
    {16, 16, ascii_large_0},        // '6' (54)
    {16, 16, ascii_large_0},        // '7' (55)
    {16, 16, ascii_large_0},        // '8' (56)
    {16, 16, ascii_large_0},        // '9' (57)
    {8, 16, ascii_large_space},     // ':' (58)
    {8, 16, ascii_large_space},     // ';' (59)
    {8, 16, ascii_large_space},     // '<' (60)
    {8, 16, ascii_large_space},     // '=' (61)
    {8, 16, ascii_large_space},     // '>' (62)
    {8, 16, ascii_large_space},     // '?' (63)
    {8, 16, ascii_large_space},     // '@' (64)
    {16, 16, ascii_large_A},        // 'A' (65)
    {16, 16, ascii_large_A},        // 'B' (66) - 使用A作为占位
    {16, 16, ascii_large_A},        // 'C' (67)
    // 其余字符使用默认数据
};

// 中文字符12x12中字体位图定义
static const CharBitmap chinese_main_bitmap_medium = {12, 12, chinese_main_small};
static const CharBitmap chinese_status_bitmap_medium = {12, 12, chinese_status_small};
static const CharBitmap chinese_state_bitmap_medium = {12, 12, chinese_state_small};
static const CharBitmap chinese_info_bitmap_medium = {12, 12, chinese_info_small};
static const CharBitmap chinese_set_bitmap_medium = {12, 12, chinese_set_small};
static const CharBitmap chinese_place_bitmap_medium = {12, 12, chinese_place_small};

const ChineseCharMap chinese_font_medium[CHINESE_CHAR_COUNT] = {
    {0x4E3B, &chinese_main_bitmap_medium},      // 主
    {0x9875, &chinese_page_bitmap_small},       // 页
    {0x9762, &chinese_surface_bitmap_small},    // 面
    {0x8BBE, &chinese_set_bitmap_medium},       // 设
    {0x7F6E, &chinese_place_bitmap_medium},     // 置
    {0x72B6, &chinese_status_bitmap_medium},    // 状
    {0x6001, &chinese_state_bitmap_medium},     // 态
    {0x4FE1, &chinese_info_bitmap_medium},      // 信
    {0x606F, &chinese_message_bitmap_small},    // 息
    {0x7248, &chinese_version_bitmap_small},    // 版
    {0x672C, &chinese_this_bitmap_small},       // 本
    {0, nullptr} // 结束标记
};

// 中文字符16x16大字体位图定义
static const CharBitmap chinese_main_bitmap_large = {16, 16, chinese_main_large};
static const CharBitmap chinese_status_bitmap_large = {16, 16, chinese_status_large};
static const CharBitmap chinese_state_bitmap_large = {16, 16, chinese_state_large};
static const CharBitmap chinese_info_bitmap_large = {16, 16, chinese_info_large};
static const CharBitmap chinese_set_bitmap_large = {16, 16, chinese_set_large};
static const CharBitmap chinese_place_bitmap_large = {16, 16, chinese_place_large};

const ChineseCharMap chinese_font_large[CHINESE_CHAR_COUNT] = {
    {0x4E3B, &chinese_main_bitmap_large},       // 主
    {0x9875, &chinese_page_bitmap_small},       // 页
    {0x9762, &chinese_surface_bitmap_small},    // 面
    {0x8BBE, &chinese_set_bitmap_large},        // 设
    {0x7F6E, &chinese_place_bitmap_large},      // 置
    {0x72B6, &chinese_status_bitmap_large},     // 状
    {0x6001, &chinese_state_bitmap_large},      // 态
    {0x4FE1, &chinese_info_bitmap_large},       // 信
    {0x606F, &chinese_message_bitmap_small},    // 息
    {0x7248, &chinese_version_bitmap_small},    // 版
    {0x672C, &chinese_this_bitmap_small},       // 本
    {0, nullptr} // 结束标记
};

// 默认字符（用于未找到的字符）
static const uint8_t default_char_data_small[] = {
    0x3C, 0x42, 0x99, 0xA1, 0xA1, 0x99, 0x42, 0x3C  // 问号样式 8x8
};

static const uint8_t default_char_data_medium[] = {
    0x00, 0x00, 0x0F, 0x00, 0x10, 0x80, 0x26, 0x40, 0x28, 0x40, 0x28, 0x40,
    0x26, 0x40, 0x10, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // 问号样式 12x12
};

static const uint8_t default_char_data_large[] = {
    0x00, 0x00, 0x07, 0xE0, 0x18, 0x18, 0x20, 0x04, 0x46, 0x62, 0x4A, 0x52, 0x4A, 0x52, 0x4A, 0x52,
    0x46, 0x62, 0x20, 0x04, 0x18, 0x18, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // 问号样式 16x16
};

const CharBitmap default_char_small = {8, 8, default_char_data_small};
const CharBitmap default_char_medium = {12, 12, default_char_data_medium};
const CharBitmap default_char_large = {16, 16, default_char_data_large};