/*******************************************************************************
* This file is generated by the Bitmap FontMaker.
* refer: https://gitee.com/kerndev/FontMaker
*******************************************************************************/
#include "font_data.h"
#ifdef __AVR__
#include <avr/pgmspace.h>
#else
// For non-AVR platforms (like RP2040), define PROGMEM as empty
#define PROGMEM
#endif

namespace FontData {
    namespace ASCII {
        // 字体属性
        const uint8_t FONT_WIDTH = 8;
        const uint8_t FONT_HEIGHT = 14;
        const uint8_t FONT_BPP = 1;
        const uint8_t FONT_PITCH = 1;
        const uint8_t FONT_CHAR_COUNT = 94;
        const bool FONT_MONOSPACE = true;

        // 字符点阵数据数组 - 存储在Flash中
        const uint8_t PROGMEM char_bits[ASCII_COUNT][14] =
{
//U+0041(A)
0x00,0x00,0x00,0x00,0x10,0x28,0x28,0x28,0x44,0x7C,0x44,0x82,0x00,0x00,
//U+0042(B)
0x00,0x00,0x00,0x00,0x78,0x44,0x44,0x48,0x78,0x44,0x44,0x78,0x00,0x00,
//U+0043(C)
0x00,0x00,0x00,0x00,0x1C,0x60,0x40,0x40,0x40,0x40,0x40,0x3C,0x00,0x00,
//U+0044(D)
0x00,0x00,0x00,0x00,0x78,0x44,0x42,0x42,0x42,0x42,0x44,0x78,0x00,0x00,
//U+0045(E)
0x00,0x00,0x00,0x00,0x78,0x40,0x40,0x40,0x78,0x40,0x40,0x78,0x00,0x00,
//U+0046(F)
0x00,0x00,0x00,0x00,0x78,0x40,0x40,0x40,0x78,0x40,0x40,0x40,0x00,0x00,
//U+0047(G)
0x00,0x00,0x00,0x00,0x1C,0x60,0x40,0x40,0x4E,0x42,0x42,0x3E,0x00,0x00,
//U+0048(H)
0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x00,0x00,
//U+0049(I)
0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,
//U+004A(J)
0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x80,
//U+004B(K)
0x00,0x00,0x00,0x00,0x44,0x48,0x50,0x60,0x60,0x50,0x48,0x44,0x00,0x00,
//U+004C(L)
0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x78,0x00,0x00,
//U+004D(M)
0x00,0x00,0x00,0x00,0x41,0x63,0x63,0x55,0x55,0x49,0x41,0x41,0x00,0x00,
//U+004E(N)
0x00,0x00,0x00,0x00,0x42,0x62,0x52,0x52,0x4A,0x4A,0x46,0x42,0x00,0x00,
//U+004F(O)
0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
//U+0050(P)
0x00,0x00,0x00,0x00,0x70,0x4C,0x44,0x44,0x78,0x40,0x40,0x40,0x00,0x00,
//U+0051(Q)
0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x08,0x04,
//U+0052(R)
0x00,0x00,0x00,0x00,0x70,0x4C,0x44,0x44,0x78,0x48,0x48,0x44,0x00,0x00,
//U+0053(S)
0x00,0x00,0x00,0x00,0x38,0x40,0x40,0x60,0x18,0x08,0x08,0x78,0x00,0x00,
//U+0054(T)
0x00,0x00,0x00,0x00,0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x00,
//U+0055(U)
0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
//U+0056(V)
0x00,0x00,0x00,0x00,0x84,0x84,0x44,0x48,0x48,0x28,0x30,0x10,0x00,0x00,
//U+0057(W)
0x00,0x00,0x00,0x00,0x80,0x88,0x4C,0x4C,0x55,0x53,0x23,0x23,0x00,0x00,
//U+0058(X)
0x00,0x00,0x00,0x00,0x84,0x44,0x28,0x30,0x30,0x28,0x48,0x84,0x00,0x00,
//U+0059(Y)
0x00,0x00,0x00,0x00,0x84,0x48,0x48,0x30,0x10,0x10,0x10,0x10,0x00,0x00,
//U+005A(Z)
0x00,0x00,0x00,0x00,0x7C,0x04,0x08,0x10,0x10,0x20,0x40,0x7C,0x00,0x00,
//U+0061(a)
0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x04,0x3C,0x44,0x44,0x7C,0x00,0x00,
//U+0062(b)
0x00,0x00,0x00,0x00,0x40,0x40,0x78,0x44,0x44,0x44,0x44,0x78,0x00,0x00,
//U+0063(c)
0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x40,0x40,0x40,0x40,0x78,0x00,0x00,
//U+0064(d)
0x00,0x00,0x00,0x00,0x04,0x04,0x7C,0x44,0x44,0x44,0x44,0x7C,0x00,0x00,
//U+0065(e)
0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x44,0x7C,0x40,0x40,0x78,0x00,0x00,
//U+0066(f)
0x00,0x00,0x00,0x00,0x70,0x40,0xE0,0x40,0x40,0x40,0x40,0x40,0x00,0x00,
//U+0067(g)
0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x44,0x44,0x44,0x44,0x7C,0x04,0x78,
//U+0068(h)
0x00,0x00,0x00,0x00,0x40,0x40,0x78,0x44,0x44,0x44,0x44,0x44,0x00,0x00,
//U+0069(i)
0x00,0x00,0x00,0x00,0x40,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,
//U+006A(j)
0x00,0x00,0x00,0x00,0x40,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0xC0,
//U+006B(k)
0x00,0x00,0x00,0x00,0x40,0x40,0x48,0x50,0x60,0x60,0x50,0x48,0x00,0x00,
//U+006C(l)
0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x60,0x00,0x00,
//U+006D(m)
0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x48,0x48,0x48,0x48,0x48,0x00,0x00,
//U+006E(n)
0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x44,0x44,0x44,0x44,0x44,0x00,0x00,
//U+006F(o)
0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x44,0x44,0x44,0x44,0x78,0x00,0x00,
//U+0070(p)
0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x44,0x44,0x44,0x44,0x78,0x40,0x40,
//U+0071(q)
0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x44,0x44,0x44,0x44,0x7C,0x04,0x04,
//U+0072(r)
0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x40,0x40,0x40,0x40,0x40,0x00,0x00,
//U+0073(s)
0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x40,0x60,0x10,0x08,0x70,0x00,0x00,
//U+0074(t)
0x00,0x00,0x00,0x00,0x00,0x40,0xE0,0x40,0x40,0x40,0x40,0x60,0x00,0x00,
//U+0075(u)
0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0x44,0x7C,0x00,0x00,
//U+0076(v)
0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x88,0x48,0x50,0x30,0x20,0x00,0x00,
//U+0077(w)
0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x99,0x55,0x55,0x65,0x22,0x00,0x00,
//U+0078(x)
0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x50,0x20,0x20,0x50,0x88,0x00,0x00,
//U+0079(y)
0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x88,0x48,0x50,0x30,0x20,0x20,0x40,
//U+007A(z)
0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x10,0x20,0x20,0x40,0xF8,0x00,0x00,
//U+0030(0)
0x00,0x00,0x00,0x00,0x30,0x48,0x44,0x44,0x44,0x44,0x48,0x78,0x00,0x00,
//U+0031(1)
0x00,0x00,0x00,0x00,0x30,0x50,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,
//U+0032(2)
0x00,0x00,0x00,0x00,0x70,0x08,0x08,0x08,0x10,0x10,0x60,0x7C,0x00,0x00,
//U+0033(3)
0x00,0x00,0x00,0x00,0x70,0x08,0x08,0x08,0x38,0x08,0x08,0x78,0x00,0x00,
//U+0034(4)
0x00,0x00,0x00,0x00,0x08,0x18,0x28,0x48,0x48,0xFC,0x08,0x08,0x00,0x00,
//U+0035(5)
0x00,0x00,0x00,0x00,0x78,0x40,0x40,0x70,0x08,0x08,0x08,0x78,0x00,0x00,
//U+0036(6)
0x00,0x00,0x00,0x00,0x18,0x20,0x40,0x78,0x48,0x48,0x48,0x78,0x00,0x00,
//U+0037(7)
0x00,0x00,0x00,0x00,0x7C,0x08,0x08,0x08,0x10,0x10,0x20,0x60,0x00,0x00,
//U+0038(8)
0x00,0x00,0x00,0x00,0x30,0x48,0x48,0x48,0x78,0x44,0x44,0x78,0x00,0x00,
//U+0039(9)
0x00,0x00,0x00,0x00,0x30,0x48,0x48,0x48,0x58,0x28,0x08,0x30,0x00,0x00,
//U+0021(!)
0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x40,0x00,0x00,
//U+0022(")
0x00,0x00,0x00,0x00,0x60,0x60,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//U+0023(#)
0x00,0x00,0x00,0x00,0x24,0x24,0xFC,0x28,0x48,0xFC,0x48,0x50,0x00,0x00,
//U+0024($)
0x00,0x00,0x00,0x10,0x38,0x50,0x50,0x70,0x18,0x18,0x18,0x78,0x10,0x10,
//U+0025(%)
0x00,0x00,0x00,0x00,0x62,0x54,0x54,0x58,0x2F,0x15,0x15,0x27,0x00,0x00,
//U+0026(&)
0x00,0x00,0x00,0x00,0x10,0x28,0x28,0x30,0x52,0x4C,0x44,0x7E,0x00,0x00,
//U+0027(')
0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//U+0028(()
0x00,0x00,0x00,0x00,0x20,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x20,
//U+0029())
0x00,0x00,0x00,0x00,0x40,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x40,
//U+002A(*)
0x00,0x00,0x00,0x00,0x20,0xF0,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//U+002B(+)
0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0xFC,0x10,0x10,0x00,0x00,0x00,
//U+002C(,)
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x80,
//U+002D(-)
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,
//U+002E(.)
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,
//U+002F(/)
0x00,0x00,0x00,0x00,0x10,0x10,0x10,0x20,0x20,0x20,0x40,0x40,0x00,0x00,
//U+003A(:)
0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x60,0x00,0x00,
//U+003B(;)
0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x40,0x40,0x40,
//U+003C(<)
0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x30,0xC0,0x60,0x1C,0x00,0x00,0x00,
//U+003D(=)
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0xFC,0x00,0x00,0x00,0x00,
//U+003E(>)
0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x30,0x0C,0x18,0xE0,0x00,0x00,0x00,
//U+003F(?)
0x00,0x00,0x00,0x00,0xF0,0x10,0x10,0x10,0x20,0x20,0x00,0x60,0x00,0x00,
//U+0040(@)
0x00,0x00,0x00,0x00,0x1E,0x21,0x4C,0x52,0x52,0x52,0x5F,0x40,0x3F,0x00,
//U+005B([)
0x00,0x00,0x00,0x00,0x60,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x60,
//U+005C(\)
0x00,0x00,0x00,0x00,0xC0,0x40,0x20,0x20,0x20,0x10,0x10,0x08,0x08,0x00,
//U+005D(])
0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0xC0,
//U+005E(^)
0x00,0x00,0x00,0x00,0x10,0x30,0x28,0x48,0x48,0x00,0x00,0x00,0x00,0x00,
//U+005F(_)
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,
//U+0060(`)
0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//U+007B({)
0x00,0x00,0x00,0x00,0x60,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x60,
//U+007C(|)
0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
//U+007D(})
0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x40,0x60,0x40,0x40,0x40,0x40,0xC0,
//U+007E(~)
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x98,0x00,0x00,0x00,0x00,
        };

        // 获取ASCII字符数据
        const CharBitmap* get_char_data(char c) {
            int index = get_char_index(c);
            if (index < 0) return nullptr;
            
            static CharBitmap bitmap;
            bitmap.width = FONT_WIDTH;
            bitmap.height = FONT_HEIGHT;
            bitmap.data = char_bits[index];
            return &bitmap;
        }
        
        // 获取字符索引
        int get_char_index(char c) {
            if (c < ASCII_START || c > ASCII_END) {
                return -1;
            }
            return c - ASCII_START;
        }
    }
}
